name: Release
on:
  push:
    branches: ["master", "beta"]
    paths-ignore:
      - ".husky/**"
      - "**.md"
      - package.json
permissions:
  contents: write # to be able to publish a GitHub release

jobs:
  build-extension:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: "yarn"

      - name: Install dependencies
        run: yarn
      
      - name: Build
        id: extension-build
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | awk -F/ '{print $2}')
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_OUTPUT
          yarn build
        
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.extension-build.outputs.REPO_NAME }}
          path: dist
          compression-level: 9 # maximum compression
        
  build-proxy:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      BINARY_BASE_NAME: tpulse-proxy
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: hecrj/setup-rust-action@v2
        with:
          rust-version: stable

      - name: Build on ${{ matrix.os }}
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'}}
        id: build-proxy-unix
        run: |
          cargo build --release --manifest-path src-proxy/Cargo.toml

          OS_NAME=$(echo "${{ matrix.os }}" | awk -F- '{print $1}')
          BINARY_NAME="${{ env.BINARY_BASE_NAME }}-$OS_NAME"
          SOURCE_BINARY_NAME="proxy"

          echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_OUTPUT
          echo "SOURCE_BINARY_NAME=${SOURCE_BINARY_NAME}" >> $GITHUB_OUTPUT
      
      - if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'}}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build-proxy-unix.outputs.BINARY_NAME }}
          path: src-proxy/target/release/${{ steps.build-proxy-unix.outputs.SOURCE_BINARY_NAME }}
          compression-level: 9 # maximum compression

      - name: Build on ${{ matrix.os }}
        id: build-proxy-windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          cargo build --release --manifest-path src-proxy/Cargo.toml
          ls src-proxy/target/release

          $OS_NAME = (echo "${{ matrix.os }}").Split("-")[0]
          $BINARY_NAME = "${{ env.BINARY_BASE_NAME }}-$OS_NAME.exe"
          $SOURCE_BINARY_NAME = "proxy.exe"

          echo "BINARY_NAME=$BINARY_NAME" >> $env:GITHUB_OUTPUT
          echo "SOURCE_BINARY_NAME=$SOURCE_BINARY_NAME" >> $env:GITHUB_OUTPUT

      - if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build-proxy-windows.outputs.BINARY_NAME }}
          path: src-proxy/target/release/${{ steps.build-proxy-windows.outputs.SOURCE_BINARY_NAME }}
          compression-level: 0 # Upload raw binary

  release:
    name: Release
    needs: [build-extension, build-proxy]
    runs-on: ubuntu-latest
    steps:
      # - name: Checkout
      #   uses: actions/checkout@v3
      #   with:
      #     fetch-depth: 0
      #     persist-credentials: false

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Display structure of downloaded files
        run: ls -R

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 20.x
  #         cache: "yarn"

  #     - name: Install dependencies
  #       run: yarn add -D semantic-release @semantic-release/changelog @semantic-release/git

  #     - name: Release
  #       run:
  #         yarn semantic-release
  